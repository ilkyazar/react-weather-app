{"version":3,"sources":["components/form-component.jsx","components/weather-component.jsx","App.js","constants/openWeatherConstants.js","serviceWorker.js","index.js"],"names":["Form","props","className","error","role","onSubmit","loadWeather","type","name","placeholder","autoComplete","Weather","city","weatherIcon","temp_celsius","min","max","undefined","showMinMaxTemp","temp_min","temp_max","description","hum","wind","toFixed","showHumidityWind","humidity","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","convertToCelsius","main","temp","weather","convertTokmh","speed","getWeatherIcon","id","state","icon","Clear","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clouds","t","Math","floor","mts","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1db4f554.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/form-style.css';\n\nconst Form = props => {\n    return(\n        <div className=\"container\">\n            <div>{props.error? error() : null} </div>\n            <form onSubmit={props.loadWeather}>\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-2\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"city\"\n                            placeholder=\"City\"\n                            autoComplete=\"off\"/>\n                    </div>\n                    <div className=\"col-md-3\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"country\"\n                            placeholder=\"Country\"\n                            autoComplete=\"off\"/>\n                    </div>\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n                        <button className=\"btn btn-warning\">Get Weather</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nfunction error() {\n    return (\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please enter city and country.\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Weather = (props) => {\n    return(\n        <div className=\"container text-light\">\n            <div className=\"cards pt-4\">\n                <h1>{props.city}</h1>\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                {props.temp_celsius ? (<h1 className=\"py2\">{props.temp_celsius}&deg;</h1>) : null}\n                {showMinMaxTemp(props.temp_min, props.temp_max)}\n                <h4>{props.description}</h4>\n                {showHumidityWind(props.humidity, props.wind)}\n\n            </div>\n        </div>\n    );\n};\n\nfunction showMinMaxTemp(min, max) {\n    if (min !== undefined & max !== undefined) {\n        return (\n            <h3>\n                <span className=\"px-4\">{min}&deg;</span>\n                <span className=\"px-4\">{max}&deg;</span>\n            </h3>\n        );\n    }\n}\n\nfunction showHumidityWind(hum, wind) {\n    if (hum !== undefined & wind !== undefined) {\n        return (\n            <div>\n                <h6>\n                    <span className=\"px-4\">{\"Humidity: \" + hum.toFixed(2)}%</span>\n                    <span className=\"px-4\">{\"Wind: \" + wind.toFixed(2)} km/h</span>\n                </h6>\n            </div>\n        );\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport \"./App.css\";\nimport Form from './components/form-component';\nimport Weather from './components/weather-component';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport 'weather-icons/css/weather-icons.css';\nimport * as constants from './constants/openWeatherConstants';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            city: undefined,\n            country: undefined,\n            icon: undefined,\n            main: undefined,\n            temp_celsius: undefined,\n            temp_max: undefined,\n            temp_min: undefined,\n            description: \"\",\n            humidity: undefined,\n            wind: undefined,\n            error: false\n        };\n\n        this.weatherIcon = {\n            Clear: \"wi-day-sunny\",\n            Thunderstorm: \"wi-thunderstorm\",\n            Drizzle: \"wi-sleet\",\n            Rain: \"wi-storm-showers\",\n            Snow: \"wi-snow\",\n            Atmosphere: \"wi-fog\",\n            Clouds: \"wi-day-fog\"             \n        };\n    }\n\n    convertToCelsius(t) {\n        let c = Math.floor(t - 273.15);\n        return c;\n    }\n\n    convertTokmh(mts) {\n        let kmh = mts * 3.6;\n        return kmh;\n    }\n\n    getWeatherIcon(icons, rangeId) {\n        switch(true) {\n            case rangeId >= 200 && rangeId <= 232:\n                    this.setState({icon: this.weatherIcon.Thunderstorm});\n                    break;\n            case rangeId >= 300 && rangeId <= 321:\n                    this.setState({icon: this.weatherIcon.Drizzle});\n                    break;\n            case rangeId >= 500 && rangeId <= 531:\n                    this.setState({icon: this.weatherIcon.Rain});\n                    break;\n            case rangeId >= 600 && rangeId <= 622:\n                    this.setState({icon: this.weatherIcon.Snow});\n                    break;\n            case rangeId >= 701 && rangeId <= 781:\n                    this.setState({icon: this.weatherIcon.Atmosphere});\n                    break;\n            case rangeId == 800:\n                    this.setState({icon: this.weatherIcon.Clear});\n                    break;\n            case rangeId >= 801 && rangeId <= 804:\n                    this.setState({icon: this.weatherIcon.Clouds});\n                    break;\n            default:\n                    this.setState({icon: this.weatherIcon.Clear});\n            }\n    }\n\n    getWeather = async (e) => {\n\n        e.preventDefault();\n\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        if (city && country) {\n            const api_call = await fetch(\n                `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${constants.API_KEY}`\n                );\n    \n            const response = await api_call.json();\n\n            console.log(response);\n\n            if (response.name) {\n                this.setState({\n                    city : `${response.name}, ${response.sys.country}`,\n                    temp_celsius : this.convertToCelsius(response.main.temp),\n                    temp_min : this.convertToCelsius(response.main.temp_min),\n                    temp_max : this.convertToCelsius(response.main.temp_max),\n                    description : response.weather[0].description,\n                    humidity : response.main.humidity,\n                    wind : this.convertTokmh(response.wind.speed),\n                    error : false,\n                })\n    \n                this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n            }\n            else {\n                this.setState({error: true});\n            } \n\n        } else {\n                this.setState({error: true});\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"App\">\n                <Form \n                    loadWeather={this.getWeather}\n                    error={this.state.error}\n                />\n                <Weather\n                    city={this.state.city}\n                    country={this.state.country}\n                    temp_celsius={this.state.temp_celsius}\n                    temp_min={this.state.temp_min}\n                    temp_max={this.state.temp_max}\n                    description={this.state.description}\n                    weatherIcon={this.state.icon}\n                    humidity={this.state.humidity}\n                    wind={this.state.wind}\n                    />\n            </div>\n        );\n    }\n}\n\n\nexport default App;","export const API_KEY = \"c6d81ee92719e37bc1c381a7dffc6078\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}